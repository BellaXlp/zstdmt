--- brotli-mt.h	2017-05-20 15:32:39.818922698 +0200
+++ lizard-mt.h	2017-05-20 14:27:26.000000000 +0200
@@ -15,8 +15,8 @@
  * Defines
  ****************************************/
 
-#ifndef BROTLIMT_H
-#define BROTLIMT_H
+#ifndef LIZARDMT_H
+#define LIZARDMT_H
 
 #if defined (__cplusplus)
 extern "C" {
@@ -25,37 +25,40 @@
 #include <stddef.h>   /* size_t */
 
 /* current maximum the library will accept */
-#define BROTLIMT_THREAD_MAX 128
-#define BROTLIMT_LEVEL_MIN    0
-#define BROTLIMT_LEVEL_MAX   11
+#define LIZARDMT_THREAD_MAX 128
+#define LIZARDMT_LEVEL_MIN   10
+#define LIZARDMT_LEVEL_MAX   49
 
-#define BROFMT_MAGICNUMBER     0x544F5242U /* BROT */
-#define BROFMT_MAGIC_SKIPPABLE 0x184D2A50U
+#define LIZARDFMT_MAGICNUMBER     0x184D2206U
+#define LIZARDFMT_MAGIC_SKIPPABLE 0x184D2A50U
 
 /* **************************************
  * Error Handling
  ****************************************/
 
-extern size_t bromt_errcode;
+extern size_t lizardmt_errcode;
 
 typedef enum {
-  BROTLIMT_error_no_error,
-  BROTLIMT_error_memory_allocation,
-  BROTLIMT_error_read_fail,
-  BROTLIMT_error_write_fail,
-  BROTLIMT_error_data_error,
-  BROTLIMT_error_frame_compress,
-  BROTLIMT_error_frame_decompress,
-  BROTLIMT_error_compressionParameter_unsupported,
-  BROTLIMT_error_compression_library,
-  BROTLIMT_error_canceled,
-  BROTLIMT_error_maxCode
-} BROTLIMT_ErrorCode;
+  LIZARDMT_error_no_error,
+  LIZARDMT_error_memory_allocation,
+  LIZARDMT_error_read_fail,
+  LIZARDMT_error_write_fail,
+  LIZARDMT_error_data_error,
+  LIZARDMT_error_frame_compress,
+  LIZARDMT_error_frame_decompress,
+  LIZARDMT_error_compressionParameter_unsupported,
+  LIZARDMT_error_compression_library,
+  LIZARDMT_error_canceled,
+  LIZARDMT_error_maxCode
+} LIZARDMT_ErrorCode;
 
-#define PREFIX(name) BROTLIMT_error_##name
+#ifdef ERROR
+#  undef ERROR   /* reported already defined on VS 2015 (Rich Geldreich) */
+#endif
+#define PREFIX(name) LIZARDMT_error_##name
 #define ERROR(name)  ((size_t)-PREFIX(name))
-extern unsigned BROTLIMT_isError(size_t code);
-extern const char* BROTLIMT_getErrorString(size_t code);
+extern unsigned LIZARDMT_isError(size_t code);
+extern const char* LIZARDMT_getErrorString(size_t code);
 
 /* **************************************
  * Structures
@@ -65,97 +68,97 @@
 	void *buf;		/* ptr to data */
 	size_t size;		/* current filled in buf */
 	size_t allocated;	/* length of buf */
-} BROTLIMT_Buffer;
+} LIZARDMT_Buffer;
 
 /**
  * reading and writing functions
  * - you can use stdio functions or plain read/write
  * - just write some wrapper on your own
- * - a sample is given in 7-Zip ZS or bromt.c
+ * - a sample is given in 7-Zip ZS or lizardmt.c
  * - the function should return -1 on error and zero on success
  * - the read or written bytes will go to in->size or out->size
  */
-typedef int (fn_read) (void *args, BROTLIMT_Buffer * in);
-typedef int (fn_write) (void *args, BROTLIMT_Buffer * out);
+typedef int (fn_read) (void *args, LIZARDMT_Buffer * in);
+typedef int (fn_write) (void *args, LIZARDMT_Buffer * out);
 
 typedef struct {
 	fn_read *fn_read;
 	void *arg_read;
 	fn_write *fn_write;
 	void *arg_write;
-} BROTLIMT_RdWr_t;
+} LIZARDMT_RdWr_t;
 
 /* **************************************
  * Compression
  ****************************************/
 
-typedef struct BROTLIMT_CCtx_s BROTLIMT_CCtx;
+typedef struct LIZARDMT_CCtx_s LIZARDMT_CCtx;
 
 /**
  * 1) allocate new cctx
  * - return cctx or zero on error
  *
  * @level   - 1 .. 9
- * @threads - 1 .. BROTLIMT_THREAD_MAX
+ * @threads - 1 .. LIZARDMT_THREAD_MAX
  * @inputsize - if zero, becomes some optimal value for the level
  *            - if nonzero, the given value is taken
  */
-BROTLIMT_CCtx *BROTLIMT_createCCtx(int threads, int level, int inputsize);
+LIZARDMT_CCtx *LIZARDMT_createCCtx(int threads, int level, int inputsize);
 
 /**
  * 2) threaded compression
  * - errorcheck via 
  */
-size_t BROTLIMT_compressCCtx(BROTLIMT_CCtx * ctx, BROTLIMT_RdWr_t * rdwr);
+size_t LIZARDMT_compressCCtx(LIZARDMT_CCtx * ctx, LIZARDMT_RdWr_t * rdwr);
 
 /**
  * 3) get some statistic
  */
-size_t BROTLIMT_GetFramesCCtx(BROTLIMT_CCtx * ctx);
-size_t BROTLIMT_GetInsizeCCtx(BROTLIMT_CCtx * ctx);
-size_t BROTLIMT_GetOutsizeCCtx(BROTLIMT_CCtx * ctx);
+size_t LIZARDMT_GetFramesCCtx(LIZARDMT_CCtx * ctx);
+size_t LIZARDMT_GetInsizeCCtx(LIZARDMT_CCtx * ctx);
+size_t LIZARDMT_GetOutsizeCCtx(LIZARDMT_CCtx * ctx);
 
 /**
  * 4) free cctx
  * - no special return value
  */
-void BROTLIMT_freeCCtx(BROTLIMT_CCtx * ctx);
+void LIZARDMT_freeCCtx(LIZARDMT_CCtx * ctx);
 
 /* **************************************
  * Decompression
  ****************************************/
 
-typedef struct BROTLIMT_DCtx_s BROTLIMT_DCtx;
+typedef struct LIZARDMT_DCtx_s LIZARDMT_DCtx;
 
 /**
  * 1) allocate new cctx
  * - return cctx or zero on error
  *
- * @threads - 1 .. BROTLIMT_THREAD_MAX
- * @ inputsize - used for single threaded standard bro format without skippable frames
+ * @threads - 1 .. LIZARDMT_THREAD_MAX
+ * @ inputsize - used for single threaded standard lizard format without skippable frames
  */
-BROTLIMT_DCtx *BROTLIMT_createDCtx(int threads, int inputsize);
+LIZARDMT_DCtx *LIZARDMT_createDCtx(int threads, int inputsize);
 
 /**
  * 2) threaded compression
  * - return -1 on error
  */
-size_t BROTLIMT_decompressDCtx(BROTLIMT_DCtx * ctx, BROTLIMT_RdWr_t * rdwr);
+size_t LIZARDMT_decompressDCtx(LIZARDMT_DCtx * ctx, LIZARDMT_RdWr_t * rdwr);
 
 /**
  * 3) get some statistic
  */
-size_t BROTLIMT_GetFramesDCtx(BROTLIMT_DCtx * ctx);
-size_t BROTLIMT_GetInsizeDCtx(BROTLIMT_DCtx * ctx);
-size_t BROTLIMT_GetOutsizeDCtx(BROTLIMT_DCtx * ctx);
+size_t LIZARDMT_GetFramesDCtx(LIZARDMT_DCtx * ctx);
+size_t LIZARDMT_GetInsizeDCtx(LIZARDMT_DCtx * ctx);
+size_t LIZARDMT_GetOutsizeDCtx(LIZARDMT_DCtx * ctx);
 
 /**
  * 4) free cctx
  * - no special return value
  */
-void BROTLIMT_freeDCtx(BROTLIMT_DCtx * ctx);
+void LIZARDMT_freeDCtx(LIZARDMT_DCtx * ctx);
 
 #if defined (__cplusplus)
 }
 #endif
-#endif				/* BROTLIMT_H */
+#endif				/* LIZARDMT_H */
